const w="modulepreload",_=function(r){return"/"+r},a={},f=function(n,t,o){return!t||t.length===0?n():Promise.all(t.map(e=>{if(e=_(e),e in a)return;a[e]=!0;const i=e.endsWith(".css"),l=i?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${e}"]${l}`))return;const s=document.createElement("link");if(s.rel=i?"stylesheet":w,i||(s.as="script",s.crossOrigin=""),s.href=e,document.head.appendChild(s),i)return new Promise((m,u)=>{s.addEventListener("load",m),s.addEventListener("error",()=>u(new Error(`Unable to preload CSS for ${e}`)))})})).then(()=>n())};function c(r,n){return new Promise(t=>{r.addEventListener("message",function o({data:e}){e==null||e.type!==n||(r.removeEventListener("message",o),t(e))})})}c(self,"wasm_bindgen_worker_init").then(async r=>{const n=await f(()=>import("./wasm_demo.de241801.js"),[]);await n.default(r.module,r.memory),postMessage({type:"wasm_bindgen_worker_ready"}),n.wbg_rayon_start_worker(r.receiver)});async function y(r,n,t){const o={type:"wasm_bindgen_worker_init",module:r,memory:n,receiver:t.receiver()};await Promise.all(Array.from({length:t.numThreads()},async()=>{const e=new Worker(new URL("workerHelpers.9e61e953.js",import.meta.url),{type:"module"});return e.postMessage(o),await c(e,"wasm_bindgen_worker_ready"),e})),t.build()}export{y as s};
