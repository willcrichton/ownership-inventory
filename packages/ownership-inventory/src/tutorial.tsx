import { RustAnalyzer } from "@wcrichto/rust-editor";
import introJs from "intro.js";
import React, { useEffect, useRef, useState } from "react";

import { Problem } from "./problem";

const SNIPPET = `
/// Inserts the element 0 into the end of \`v\`.
fn add_zero(v: &Vec<i32>) {
  v.push(0);
}
`.trim();

export let Tutorial = ({
  next,
  ra,
}: {
  next: () => void;
  ra?: RustAnalyzer;
}) => {
  let ref = useRef<HTMLDivElement>(null);
  let [started, setStarted] = useState(false);
  let [step, setStep] = useState(0);
  let [curTour, setCurTour] = useState<introJs.IntroJs | undefined>();

  let makeTour = (steps: introJs.Step[]) => {
    if (curTour) curTour.exit();
    let tour = introJs();
    tour.addSteps(steps);
    tour.setOptions({
      showBullets: false,
      exitOnEsc: false,
      exitOnOverlayClick: false,
    });
    tour.onafterchange(() => {
      let nextButton = document.querySelector<HTMLAnchorElement>(
        ".introjs-nextbutton"
      );
      if (!nextButton) return;
      nextButton.style.display =
        tour.currentStep() == steps.length - 1 ? "none" : "inline";
    });
    tour.start();
    setCurTour(tour);
  };

  useEffect(() => {
    if (!started) return;

    let parent = ref.current!;
    let part = parent.querySelector(`.part:nth-child(${step + 1})`)!;

    if (step == 0) {
      let editor = part.querySelector(".editor")!;
      let steps: introJs.Step[] = [
        {
          element: part,
          intro: `Each problem focuses on a single buggy program. First, you need to identify why the program is buggy.`,
          position: "right",
        },
        {
          element: editor,
          intro: `
          The code viewer includes some IDE features like types and method definitions. Try hovering your mouse over <code>v</code> and <code>push</code>.
          `,
          position: "right",
        },
        {
          element: part,
          intro: `Try figuring out why the compiler would reject this program. Write your answer in the blank, and click Submit.`,
          position: "right",
        },
      ];
      makeTour(steps);
    } else if (step == 1) {
      let steps: introJs.Step[] = [
        {
          element: part,
          intro:
            "Next, you'll be shown the actual error message generated by the Rust compiler. I want to know: does the error message match your expectation? Does its vocabulary make sense?<br /><br /> There is no correct answer &mdash; it's your personal interpretation. Fill in your response and click Submit.",
          position: "left",
        },
      ];
      makeTour(steps);
    } else if (step == 2) {
      let steps: introJs.Step[] = [
        {
          element: part,
          intro:
            "This question checks your understanding of what situations Rust is trying to avoid. For the <code>add_zero</code> function, what could go wrong if Rust let you mutate an immutable reference?<br /><br />Depending on the ownership error, it may be possible that nothing could go wrong. You should say so if that's true.<br/ ><br/ >Fill in your response and click Submit.",
          position: "right",
        },
      ];
      makeTour(steps);
    } else if (step == 3) {
      let outputArea = part.querySelector(".output button")!;
      let steps: introJs.Step[] = [
        {
          element: part,
          intro:
            "Finally, you have to fix the function. Again there is no one correct answer &mdash; decide what you think best preserves the intention of the function.",
          position: "left",
        },
        {
          element: outputArea,
          intro:
            "As you are editing the code, click Run to see the output of the Rust compiler on your program. Try clicking it now.",
          position: "left",
        },
        {
          element: part,
          intro:
            "And that's all the tasks! Try fixing this function. Once you hit submit, we will go to the main experiment.",
          position: "left",
        },
      ];
      makeTour(steps);
    }
  }, [started, step]);

  return (
    <div ref={ref}>
      <p>
        First, we're going to walk through a sample problem. Click this button
        to get started:
        <br />
        <button onClick={() => setStarted(true)}>Start Tutorial</button>
      </p>
      {started ? (
        <Problem
          snippet={SNIPPET}
          next={next}
          ra={ra}
          onStep={step => {
            if (step == 4) curTour!.exit();
            setStep(step);
          }}
        />
      ) : null}
    </div>
  );
};
