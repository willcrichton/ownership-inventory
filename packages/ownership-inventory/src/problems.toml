[[problems]]
name = "make_separator"
code = """
/// Makes a string to separate lines of text, 
/// returning a default if the provided string is blank
fn make_separator(user_str: &str) -> &str {
  if user_str == "" {
    let default = "=".repeat(10);
    &default
  } else {
    user_str
  }
}
"""

[[problems]]
name = "get_or_default"
code = """
/// Gets the string out of an option if it exists,
/// returning a default otherwise
fn get_or_default(arg: &Option<String>) -> String {
  if arg.is_none() {
      return String::new();
  }
  let s = arg.unwrap();
  s.clone()
}
"""

[[problems]]
name = "find_nth"
code = """
/// Returns the n-th largest element in a slice
fn find_nth<T: Ord + Clone>(elems: &[T], n: usize) -> T {
  elems.sort();
  let t = &elems[n];
  return t.clone();
}
"""  
  
[[problems]]
name = "remove_zeros"
code = """
/// Removes all the zeros in-place from a vector of integers.
fn remove_zeros(v: &mut Vec<i32>) {
  for (i, t) in v.iter().enumerate().rev() {
    if *t == 0 {
      v.remove(i);
    }
  }
}
"""

[[problems]]
name = "apply_curve"
code = """
struct TestResult {
  /// Student's scores on a test
  scores: Vec<usize>,

  /// A possible value to curve all sores
  curve: Option<usize>
}
impl TestResult {  
  pub fn get_curve(&self) -> &Option<usize> { 
    &self.curve 
  }

  /// If there is a curve, then increments all 
  /// scores by the curve
  pub fn apply_curve(&mut self) {
    if let Some(curve) = self.get_curve() {
      for score in self.scores.iter_mut() {
        *score += *curve;
      }
    }
  }
}
"""
  
[[problems]]  
name = "reverse"
code = """
/// Reverses the elements of a vector in-place
fn reverse(v: &mut Vec<i32>) {
  let n = v.len();
  for i in 0 .. n / 2 {
    std::mem::swap(&mut v[i], &mut v[n - i - 1]);
  }
}
"""

[[problems]]
name = "concat_all"
code = """
/// Adds the string `s` to all elements of 
/// the input iterator
fn concat_all(
  iter: impl Iterator<Item = String>,
  s: &str
) -> impl Iterator<Item = String> {
  iter.map(move |s2| s2 + s)
}
"""

[[problems]]  
name = "add_displayable"
code = """
/// Adds a Display-able object into a vector of 
/// Display trait objects
use std::fmt::Display;
fn add_displayable<T: Display>(
  v: &mut Vec<Box<dyn Display>>, 
  t: T
) {
  v.push(Box::new(t));
}
"""